{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./lib/emptyTile.js","webpack:///./lib/entry.js","webpack:///./lib/game.js","webpack:///./lib/grid.js","webpack:///./lib/jewel.js","webpack:///./lib/position.js","webpack:///./lib/progress.js","webpack:///./lib/timer.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAA4B;;AAEb,wBAAwB,8CAAK;AAC5C;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAA0B;;AAE1B;AACA,mBAAmB,6CAAI;AACvB,CAAC;;;;;;;;;;;;;ACJD;AAAA;AAAA;AAAA;AAAA;AAA0B;AACE;AACA;;AAEb;AACf;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,6CAAI;AACxB,qBAAqB,8CAAK;AAC1B;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAkC;AACN;AACM;AACE;;AAErB;AACf;AACA;AACA;AACA,wBAAwB,iDAAQ;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,mBAAmB,OAAO;AAC1B;AACA,qBAAqB,OAAO;AAC5B,iCAAiC,8CAAK;AACtC,cAAc,iDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB,iDAAQ;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,4DAA4D,kDAAS;AACrE;;AAEA;AACA;AACA,6BAA6B,QAAQ;AACrC;AACA;AACA;AACA;AACA,mCAAmC,8CAAK;AACxC,YAAY,iDAAQ;AACpB;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA,WAAW;AACX;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;ACvMA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,MAAM,wBAAwB;AAC7D,gCAAgC,MAAM,gBAAgB;AACtD;AACA,4BAA4B,UAAU;AACtC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C,8BAA8B,cAAc;AAC5C,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,8BAA8B,gBAAgB;AAC9C,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC9EA;AAAA;AAAe;AACf;AACA;AACA;AACA;;AAEA;AACA,YAAY;AACZ;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACtDA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,wCAAwC;AACxE;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA,uDAAuD;AACvD;AACA;;AAEA;AACA;AACA,8BAA8B,WAAW;AACzC,+BAA+B,WAAW;AAC1C;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;;;;;;;;;;;;AC/CA;AAAA;AAAe;AACf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA;AACA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./lib/entry.js\");\n","import Jewel from './jewel';\n\nexport default class EmptyTile extends Jewel {\n  constructor(pos) {\n    super(pos, null, 'NULL');\n  }\n\n  matches() {\n    return false;\n  }\n}\n","import Game from './game';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const game = new Game();\n});\n","import Grid from './grid';\nimport Jewel from './jewel';\nimport Timer from './timer';\n\nexport default class Game {\n  constructor() {\n    this.board = document.getElementById('board');\n    this.board.addEventListener('incrementLevel', this.incrementLevel.bind(this));\n    this.board.addEventListener('timeout', this.gameOver.bind(this));\n    this.levels = document.getElementById('level');\n    this.level = 1;\n    this.grid = new Grid(this, this.level);\n    this.timer = new Timer();\n    this.newLevel();\n    this.play();\n  }\n  newLevel() {\n    this.levels.innerHTML = `Level ${this.level}`;\n    this.grid.reset();\n    this.timer.reset(200 * 1000 - (20 * this.level));\n  }\n\n  incrementLevel() {\n    this.levelOver(3000);\n    this.level += 1;\n  }\n\n  levelOver(delay) {\n    this.grid.clearGrid();\n    setTimeout(() => {\n      this.newLevel();\n    }, delay);\n  }\n\n  gameOver() {\n    this.levelOver(3000);\n    this.grid.progress.total = 0;\n    this.grid.level = 1;\n  }\n\n  play() {\n    this.grid.start();\n    this.time.start();\n  }\n}\n","import Position from './position';\nimport Jewel from './jewel';\nimport Progress from './progress';\nimport emptyTile from './emptyTile';\n\nexport default class Grid {\n  constructor(game, level) {\n    this.game = game;\n    game.board.addEventListener('mousedown', this.handleSelect.bind(this));\n    this.progress = new Progress();\n    this.moved = [];\n    this.getMoved = this.getMoved.bind(this);\n  }\n\n  getMoved() {\n    const result = this.moved.slice();\n    this.moved = [];\n    return result;\n  }\n\n  reset() {\n    this.level = this.game.level;\n    this.game.board.innerHTML = '';\n\n    this.columns = {};\n    for (let i = 0; i < 8; i++) {\n      this.columns[i] = {};\n      for (let j = 0; j < 8; j++) {\n        this.columns[i][j] = new Jewel(\n          new Position(i, j),\n          this.game.board,\n          this\n        ).placeJewel();\n      }\n    }\n  }\n\n  start() {\n    const newBoard = this.getMoved();\n    debugger\n    this.handleMatch(newBoard);\n  }\n\n  handleSelect(e) {\n    const chosen = e.target.data;\n    this.selectJewel(new Position(chosen.x, chosen.y));\n  }\n\n  selectJewel(pos) {\n    const newJewel = this.getJewel(pos);\n    if (this.selected) {\n      if (pos.isNearby(this.selected)) {\n        this.handleSwap(newJewel, this.selected);\n        this.selected.reject(500);\n        this.selected = null;\n      }\n    } else {\n      this.select(newJewel);\n    }\n  }\n\n  handleSwap(jewel, otherJewel) {\n    this.switchJewels(jewel, otherJewel, 0);\n    this.handleMatch([jewel, otherJewel]) || this.switchJewels(jewel, otherJewel, 300);\n  }\n\n  switchJewels(jewel, otherJewel, delay) {\n    jewel.switchWith(otherJewel, delay);\n    this.updateColumns(jewel);\n    this.updateColumns(otherJewel);\n  }\n\n  updateColumns(jewel) {\n    debugger\n    this.columns[jewel.pos.y][jewel.pos.x] = jewel;\n  }\n\n  select(jewel) {\n    if (this.selected) this.selected.reject();\n    this.selected = jewel;\n    jewel.select();\n  }\n\n  merge(jewels) {\n    return jewels.filter((jewel, idx) => jewels.indexOf(jewel) === idx);\n  }\n\n\n  handleMatch(jewelsArr) {\n    if (jewelsArr.length === 0) return false;\n    let matched = [];\n    jewelsArr.forEach(jewel => {\n      matched = matched.concat(this.getAllRows(jewel));\n    });\n    debugger\n    this.removeJewels(matched);\n    setTimeout(() => this.handleMatch(this.getMoved()), 1000);\n    return !!matched.length;\n  }\n\n  getAllRows(jewel) {\n    debugger\n    let foundMatches = false;\n    let pairs = [];\n    // pos of matching jewels next to each other\n    let removeThese = [];\n    jewel.pos.allNearbyJewels().forEach(pos => {\n      if (this.getJewel(pos).matches(jewel)) {\n        pairs.push(pos);\n      }\n    });\n    pairs.forEach(pos => {\n      const row = this.getRow(jewel, this.getJewel(pos));\n      if (row.length >= 3) {\n        foundMatches = true;\n        removeThese = this.merge(removeThese.concat(row));\n      }\n    });\n    return foundMatches ? removeThese : [];\n  }\n\n  getRow(jewel, otherJewel) {\n    debugger\n    const start = this.getEnd([jewel, otherJewel]);\n    const end = this.getEnd([jewel, otherJewel]).slice(2);\n    end.reverse();\n    return start.concat(end);\n    //returns array of matching jewel objects\n  }\n\n  getEnd(jewels = []) {\n    debugger\n    let idxA = jewels.length - 2;\n    let idxB = jewels.length - 1;\n    const nextJewel = this.getJewel(\n      jewels[idxA].pos.next(jewels[idxB].pos)\n    );\n    if (nextJewel.matches(idxA)) {\n      jewels.push(nextJewel);\n      return this.getEnd(jewels);\n    }\n    return jewels;\n  }\n\n  getJewel(pos) {\n    return pos.isValid() ? this.columns[pos.x][pos.y] : new emptyTile(pos);\n  }\n\n  refillTile(positions) {\n    positions.forEach(pos => {\n      for (let y = pos.y - 1; y >= 0; y--) {\n        const replacement = this.columns[pos.x][y];\n        this.columns[pos.x][y + 1] = replacement;\n        replacement.moveDown(700);\n      }\n      this.columns[pos.x][0] = new Jewel(\n        new Position(pos.x, 0),\n        this.game.board,\n        this\n      ).placeJewel(700);\n    });\n  }\n\n  clearGrid() {\n    this.getMoved();\n    setTimeout(() => {\n      const allTiles = [];\n      for (let y = 7; y >= 0; y--) {\n        for (let x = 0; x < 8; x++) {\n          allTiles.push(this.columns[x][y]);\n        }\n      }\n      const oneDown = (i = 0) => {\n        if (i < 9) {\n          setTimeout(() => {\n            allTiles.forEach(jewel => {\n              if (jewel.pos.y === 7) {\n                jewel.remove(0);\n              } else {\n                jewel.moveDown();\n              }\n            });\n            oneDown(i + 1);\n          }, 200);\n        }\n      };\n      oneDown();\n    }, 1000);\n  }\n\n  removeJewels(row) {\n    const removePositions = row.map(jewel => Object.assign(jewel.pos))\n      .sort((a, b) => a.y < b.y ? -1 : 1);\n    row.forEach(jewel => jewel.remove(500));\n    this.refillTile(removePositions);\n    this.progress.update(row);\n    return removePositions;\n  }\n\n}\n","export default class Jewel {\n  constructor(pos, board, grid) {\n    this.types = [\n      'orange', 'green', 'blue',\n      'cyan', 'pink', 'yellow',\n      'round_rainbow'\n    ];\n    this.grid = grid;\n    this.board = board;\n    this.pos = pos;\n    this.y = pos.y;\n    this.x = pos.x;\n    this.type = this.types[Math.floor(Math.random() * (0, 7))];\n    this.div = document.createElement('div');\n    this.div.style.top = `0px`; //`${this.pos.y * GAP - 1000}px`;\n    this.div.style.left = `0px`; //`${this.pos.px().x}px`;\n    this.div.data = pos;\n    this.div.className = `${this.type} jewel`;\n  }\n\n  matches(otherJewel) {\n    return this.type === otherJewel.type;\n  }\n\n  select() {\n    this.div.classList.add('selected');\n  }\n\n  reject(delay) {\n    setTimeout(() => {\n      this.div.classList.remove('selected');\n    }, delay);\n  }\n\n  animate(newPos, delay) {\n    debugger\n    setTimeout(() => {\n      this.div.style.left = `${newPos.px().x}px`;\n      this.div.style.top = `${newPos.px().y}px`;\n    }, delay);\n  }\n\n  placeJewel(delay = 1000) {\n    this.board.appendChild(this.div);\n    this.grid.moved.push(this);\n    setTimeout(() => {\n      this.div.style.top = `${this.pos.px().y}`;\n    }, delay - (this.y * 120) + this.x % 3 * 30);\n\n    return this;\n  }\n\n  remove(delay) {\n    this.grid.moved.splice(this.grid.moved.indexOf(this), 1);\n    setTimeout(() => {\n      this.div.classList.remove('removed');\n      setTimeout(() => {\n        this.div.remove();\n      }, 300);\n    }, delay);\n  }\n\n  move(newPos, delay) {\n    this.pos = newPos;\n    this.div.data = newPos;\n    this.grid.moved.push(this);\n    debugger\n    this.animate(newPos, delay);\n  }\n\n  moveDown(delay) {\n    this.move(this.pos.down(), delay);\n  }\n\n  switchWith(otherJewel, delay) {\n    this.move(otherJewel.pos, delay);\n    otherJewel.move(this.pos, delay);\n  }\n}\n","export default class Position {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  shift(otherJewel) {\n    return { x: otherJewel.x - this.x, y: otherJewel.y - this.y };\n  }\n\n  next(otherJewel) {\n    const shift = this.shift(otherJewel);\n    return new Position(shift.x + otherJewel.x, shift.y + otherJewel.y);\n  }\n\n  allNearbyJewels() {\n    const x = this.x;\n    const y = this.y;\n    return [\n      new Position(x - 1, y),\n      new Position(x + 1, y),\n      new Position(x, y - 1),\n      new Position(x, y + 1)\n    ].filter(pos => pos.isValid());\n    //returns an array of valid pos for nearby jewels\n  }\n\n  isValid() {\n    return (this.x >= 0 && this.x < 8 && this.y >= 0 && this.y < 8);\n  }\n\n  isNearby(otherJewel) {\n    if (this.x === otherJewel.x) {\n      //same row\n      if (this.y + 1 === otherJewel.y || this.y - 1 === otherJewel.y) return true;\n    } else if (this.y === otherJewel.y) {\n      //same col\n      if (this.x + 1 === otherJewel.x || this.x - 1 === otherJewel.x) return true;\n    } else {\n      return false;\n    }\n  }\n\n  down() {\n    return new Position(this.x, this.y + 1);\n  }\n\n  px() {\n    return new Position(this.x, this.y);\n  }\n\n  inLine(otherJewel) {\n    return this.x === otherJewel.x || this.x === otherJewel.y;\n  }\n}\n","export default class Progress {\n  constructor() {\n    this.bar = document.getElementById('progress');\n    this.total = document.getElementById('score');\n    this.flash = document.getElementById('points');\n    this.points = 0;\n  }\n\n  reset(total = 100000) {\n    this.points = 0;\n    this.ratio = 100/total;\n    this.bar.style.width = '0%';\n  }\n\n  update(jewels) {\n    if (jewels.length === 0) return;\n    const jewelCount = jewels.length;\n    const scoredPoints = (jewelCount ^ 3) * 100;\n    this.points += scoredPoints;\n    this.total += scoredPoints;\n    setTimeout(() => {\n      this.display(scoredPoints, jewels[1].pos);\n      this.bar.classList.add('updating');\n      this.bar.style.width = `${Math.min(this.points * this.ratio, 100)}%`;\n      this.total.innerHTML = this.total;\n    }, 500);\n    if (this.points * this.ratio >= 100 && !this.freeze) {\n      this.wholeNothaLevel();\n      this.freeze = true;\n    }\n  }\n\n  wholeNothaLevel() {\n    const event = new CustomEvent('wholeNothaLevel', {});\n    setTimeout(() =>  document.getElementById('board').dispatchEvent(event), 1000);\n  }\n\n  display(points, pos) {\n    this.flash.innerHTML = points;\n    this.flash.style.top = `${pos.px().y}px`;\n    this.flash.style.left = `${pos.px().x}px`;\n    this.flash.classList.add('active');\n    setTimeout(() => {\n      this.bar.classList.remove('updating');\n      this.bar.classList.remove('active');\n    }, 600);\n  }\n}\n","export default class Timer {\n  constructor() {\n    this.clock = document.getElementById('time');\n    setInterval(this.updateClock.bind(this), 100);\n    this.board = document.getElementById('board');\n  }\n\n  reset(time) {\n    this.startTime = new Date().getTime();\n    this.totalTime = time;\n  }\n\n  start() {\n    this.startTime = new Date().getTime();\n    this.stopped = false;\n  }\n\n  stop() {\n    this.totalTime = this.timeLeft();\n    this.stopped = true;\n  }\n\n  timeLeft() {\n    return this.totalTime - (new Date().getTime() - this.startTime);\n  }\n\n  updateClock() {\n    const timeLeft = Math.ceil(this.timeLeft() /1000);\n    this.clock.innerHTML = timeLeft;\n    if (timeLeft <= 0) {\n      console.log('game over');\n      this.stop();\n      this.totalTime = 1000;\n      this.startTime = new Date().getTime();\n      this.board.dispatchEvent(new CustomEvent('timeout', {}));\n    }\n  }\n}\n"],"sourceRoot":""}